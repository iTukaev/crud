syntax = "proto3";

package gitlab.ozon.dev.iTukaev.homework.api;
option go_package = "gitlab.ozon.dev/iTukaev/homework/pkg/api;api";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "models/user.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/any.proto";

service User {

  // Create new user
  //
  // Add new user to DB and cache
  rpc UserCreate(UserCreateRequest) returns (UserCreateResponse) {
    option (google.api.http) = {
      post: "/v1/user"
      body: "user"
    };
  }

  // Update user information
  //
  // Update user's password, email and full name in DB and cache
  rpc UserUpdate(UserUpdateRequest) returns (UserUpdateResponse) {
    option (google.api.http) = {
      put: "/v1/user/{name}"
      body: "profile"
    };
  }

  // Delete user
  //
  // Delete user from DB and cache
  rpc UserDelete(UserDeleteRequest) returns (UserDeleteResponse) {
    option (google.api.http) = {
      delete: "/v1/user/{name}"
    };
  }

  // Get user information
  //
  // Returns user information by user name
  rpc UserGet(UserGetRequest) returns (UserGetResponse) {
    option (google.api.http) = {
      get: "/v1/user/{name}"
    };
  }

  // Get users list
  //
  // Returns all users from DB
  rpc UserList(UserListRequest) returns (UserListResponse) {
    option (google.api.http) = {
      get: "/v1/users"
    };
  }

  // Get users list
  //
  // Returns all users from DB
  rpc Data(DataRequest) returns (DataResponse) {
    option (google.api.http) = {
      get: "/v1/data"
    };
  }

  // Get all users
  //
  // Returns all users from DB
  rpc UserAllList(UserAllListRequest) returns (stream UserAllListResponse) {}
}


// UserCreate endpoint messages
message UserCreateRequest {
  api.models.User user = 1;
  // pubSub is a flag to show method of response waiting
  Wait pubSub          = 2;
}
message UserCreateResponse{
  string uid = 1;
}


// UserUpdate endpoint messages
message UserUpdateRequest {
  string name                = 1;
  api.models.Profile profile = 2;
  Wait pubSub                = 3;
}
message UserUpdateResponse{
  string uid = 1;
}


// UserDelete endpoint messages
message UserDeleteRequest {
  string name = 1;
  Wait pubSub = 2;
}
message UserDeleteResponse{
  string uid = 1;
}

// UserGet endpoint messages
message UserGetRequest {
  string name = 1;
  Wait pubSub = 2;
}
message UserGetResponse{
  string uid = 1;
}

// UserList endpoint messages
message UserListRequest {
  // Sort flag. If true, fields are sorted in descending order.
  bool order = 1;

  // Maximum number of rows.
  uint64 limit = 2;

  // Page number.
  uint64 offset = 3;

  Wait pubSub = 4;
}
message UserListResponse{
  string uid = 1;
}

// UserList endpoint messages
message DataRequest {
  string uid = 1;
}
message DataResponse{
  google.protobuf.Any Body = 2;
}

// UserAllList endpoint messages
message UserAllListRequest {
  // Sort flag. If true, fields are sorted in descending order.
  bool order = 1;

  // Maximum number of rows.
  uint64 limit = 2;
}
message UserAllListResponse{
  repeated api.models.User users = 1;
}

enum Wait {
  pub   = 0;
  cache = 1;
}

//OpenAPIv2 base options
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "User CRUD service";
    version: "1.0";
  };

  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
};
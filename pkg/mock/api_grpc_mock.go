// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/api_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "gitlab.ozon.dev/iTukaev/homework/pkg/api"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockUserClient is a mock of UserClient interface.
type MockUserClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserClientMockRecorder
}

// MockUserClientMockRecorder is the mock recorder for MockUserClient.
type MockUserClientMockRecorder struct {
	mock *MockUserClient
}

// NewMockUserClient creates a new mock instance.
func NewMockUserClient(ctrl *gomock.Controller) *MockUserClient {
	mock := &MockUserClient{ctrl: ctrl}
	mock.recorder = &MockUserClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserClient) EXPECT() *MockUserClientMockRecorder {
	return m.recorder
}

// UserAllList mocks base method.
func (m *MockUserClient) UserAllList(ctx context.Context, in *api.UserAllListRequest, opts ...grpc.CallOption) (api.User_UserAllListClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserAllList", varargs...)
	ret0, _ := ret[0].(api.User_UserAllListClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserAllList indicates an expected call of UserAllList.
func (mr *MockUserClientMockRecorder) UserAllList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAllList", reflect.TypeOf((*MockUserClient)(nil).UserAllList), varargs...)
}

// UserCreate mocks base method.
func (m *MockUserClient) UserCreate(ctx context.Context, in *api.UserCreateRequest, opts ...grpc.CallOption) (*api.UserCreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserCreate", varargs...)
	ret0, _ := ret[0].(*api.UserCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCreate indicates an expected call of UserCreate.
func (mr *MockUserClientMockRecorder) UserCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreate", reflect.TypeOf((*MockUserClient)(nil).UserCreate), varargs...)
}

// UserDelete mocks base method.
func (m *MockUserClient) UserDelete(ctx context.Context, in *api.UserDeleteRequest, opts ...grpc.CallOption) (*api.UserDeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserDelete", varargs...)
	ret0, _ := ret[0].(*api.UserDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDelete indicates an expected call of UserDelete.
func (mr *MockUserClientMockRecorder) UserDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDelete", reflect.TypeOf((*MockUserClient)(nil).UserDelete), varargs...)
}

// UserGet mocks base method.
func (m *MockUserClient) UserGet(ctx context.Context, in *api.UserGetRequest, opts ...grpc.CallOption) (*api.UserGetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserGet", varargs...)
	ret0, _ := ret[0].(*api.UserGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGet indicates an expected call of UserGet.
func (mr *MockUserClientMockRecorder) UserGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGet", reflect.TypeOf((*MockUserClient)(nil).UserGet), varargs...)
}

// UserList mocks base method.
func (m *MockUserClient) UserList(ctx context.Context, in *api.UserListRequest, opts ...grpc.CallOption) (*api.UserListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserList", varargs...)
	ret0, _ := ret[0].(*api.UserListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserList indicates an expected call of UserList.
func (mr *MockUserClientMockRecorder) UserList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserList", reflect.TypeOf((*MockUserClient)(nil).UserList), varargs...)
}

// UserUpdate mocks base method.
func (m *MockUserClient) UserUpdate(ctx context.Context, in *api.UserUpdateRequest, opts ...grpc.CallOption) (*api.UserUpdateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserUpdate", varargs...)
	ret0, _ := ret[0].(*api.UserUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserUpdate indicates an expected call of UserUpdate.
func (mr *MockUserClientMockRecorder) UserUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdate", reflect.TypeOf((*MockUserClient)(nil).UserUpdate), varargs...)
}

// MockUser_UserAllListClient is a mock of User_UserAllListClient interface.
type MockUser_UserAllListClient struct {
	ctrl     *gomock.Controller
	recorder *MockUser_UserAllListClientMockRecorder
}

// MockUser_UserAllListClientMockRecorder is the mock recorder for MockUser_UserAllListClient.
type MockUser_UserAllListClientMockRecorder struct {
	mock *MockUser_UserAllListClient
}

// NewMockUser_UserAllListClient creates a new mock instance.
func NewMockUser_UserAllListClient(ctrl *gomock.Controller) *MockUser_UserAllListClient {
	mock := &MockUser_UserAllListClient{ctrl: ctrl}
	mock.recorder = &MockUser_UserAllListClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser_UserAllListClient) EXPECT() *MockUser_UserAllListClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockUser_UserAllListClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockUser_UserAllListClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockUser_UserAllListClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockUser_UserAllListClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockUser_UserAllListClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockUser_UserAllListClient)(nil).Context))
}

// Header mocks base method.
func (m *MockUser_UserAllListClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockUser_UserAllListClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockUser_UserAllListClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockUser_UserAllListClient) Recv() (*api.UserAllListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*api.UserAllListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockUser_UserAllListClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockUser_UserAllListClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockUser_UserAllListClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockUser_UserAllListClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockUser_UserAllListClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockUser_UserAllListClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockUser_UserAllListClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockUser_UserAllListClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockUser_UserAllListClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockUser_UserAllListClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockUser_UserAllListClient)(nil).Trailer))
}

// MockUserServer is a mock of UserServer interface.
type MockUserServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserServerMockRecorder
}

// MockUserServerMockRecorder is the mock recorder for MockUserServer.
type MockUserServerMockRecorder struct {
	mock *MockUserServer
}

// NewMockUserServer creates a new mock instance.
func NewMockUserServer(ctrl *gomock.Controller) *MockUserServer {
	mock := &MockUserServer{ctrl: ctrl}
	mock.recorder = &MockUserServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServer) EXPECT() *MockUserServerMockRecorder {
	return m.recorder
}

// UserAllList mocks base method.
func (m *MockUserServer) UserAllList(arg0 *api.UserAllListRequest, arg1 api.User_UserAllListServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAllList", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserAllList indicates an expected call of UserAllList.
func (mr *MockUserServerMockRecorder) UserAllList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAllList", reflect.TypeOf((*MockUserServer)(nil).UserAllList), arg0, arg1)
}

// UserCreate mocks base method.
func (m *MockUserServer) UserCreate(arg0 context.Context, arg1 *api.UserCreateRequest) (*api.UserCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCreate", arg0, arg1)
	ret0, _ := ret[0].(*api.UserCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCreate indicates an expected call of UserCreate.
func (mr *MockUserServerMockRecorder) UserCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreate", reflect.TypeOf((*MockUserServer)(nil).UserCreate), arg0, arg1)
}

// UserDelete mocks base method.
func (m *MockUserServer) UserDelete(arg0 context.Context, arg1 *api.UserDeleteRequest) (*api.UserDeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDelete", arg0, arg1)
	ret0, _ := ret[0].(*api.UserDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDelete indicates an expected call of UserDelete.
func (mr *MockUserServerMockRecorder) UserDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDelete", reflect.TypeOf((*MockUserServer)(nil).UserDelete), arg0, arg1)
}

// UserGet mocks base method.
func (m *MockUserServer) UserGet(arg0 context.Context, arg1 *api.UserGetRequest) (*api.UserGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGet", arg0, arg1)
	ret0, _ := ret[0].(*api.UserGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGet indicates an expected call of UserGet.
func (mr *MockUserServerMockRecorder) UserGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGet", reflect.TypeOf((*MockUserServer)(nil).UserGet), arg0, arg1)
}

// UserList mocks base method.
func (m *MockUserServer) UserList(arg0 context.Context, arg1 *api.UserListRequest) (*api.UserListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserList", arg0, arg1)
	ret0, _ := ret[0].(*api.UserListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserList indicates an expected call of UserList.
func (mr *MockUserServerMockRecorder) UserList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserList", reflect.TypeOf((*MockUserServer)(nil).UserList), arg0, arg1)
}

// UserUpdate mocks base method.
func (m *MockUserServer) UserUpdate(arg0 context.Context, arg1 *api.UserUpdateRequest) (*api.UserUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdate", arg0, arg1)
	ret0, _ := ret[0].(*api.UserUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserUpdate indicates an expected call of UserUpdate.
func (mr *MockUserServerMockRecorder) UserUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdate", reflect.TypeOf((*MockUserServer)(nil).UserUpdate), arg0, arg1)
}

// mustEmbedUnimplementedUserServer mocks base method.
func (m *MockUserServer) mustEmbedUnimplementedUserServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserServer")
}

// mustEmbedUnimplementedUserServer indicates an expected call of mustEmbedUnimplementedUserServer.
func (mr *MockUserServerMockRecorder) mustEmbedUnimplementedUserServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserServer", reflect.TypeOf((*MockUserServer)(nil).mustEmbedUnimplementedUserServer))
}

// MockUnsafeUserServer is a mock of UnsafeUserServer interface.
type MockUnsafeUserServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeUserServerMockRecorder
}

// MockUnsafeUserServerMockRecorder is the mock recorder for MockUnsafeUserServer.
type MockUnsafeUserServerMockRecorder struct {
	mock *MockUnsafeUserServer
}

// NewMockUnsafeUserServer creates a new mock instance.
func NewMockUnsafeUserServer(ctrl *gomock.Controller) *MockUnsafeUserServer {
	mock := &MockUnsafeUserServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeUserServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeUserServer) EXPECT() *MockUnsafeUserServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedUserServer mocks base method.
func (m *MockUnsafeUserServer) mustEmbedUnimplementedUserServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserServer")
}

// mustEmbedUnimplementedUserServer indicates an expected call of mustEmbedUnimplementedUserServer.
func (mr *MockUnsafeUserServerMockRecorder) mustEmbedUnimplementedUserServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserServer", reflect.TypeOf((*MockUnsafeUserServer)(nil).mustEmbedUnimplementedUserServer))
}

// MockUser_UserAllListServer is a mock of User_UserAllListServer interface.
type MockUser_UserAllListServer struct {
	ctrl     *gomock.Controller
	recorder *MockUser_UserAllListServerMockRecorder
}

// MockUser_UserAllListServerMockRecorder is the mock recorder for MockUser_UserAllListServer.
type MockUser_UserAllListServerMockRecorder struct {
	mock *MockUser_UserAllListServer
}

// NewMockUser_UserAllListServer creates a new mock instance.
func NewMockUser_UserAllListServer(ctrl *gomock.Controller) *MockUser_UserAllListServer {
	mock := &MockUser_UserAllListServer{ctrl: ctrl}
	mock.recorder = &MockUser_UserAllListServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser_UserAllListServer) EXPECT() *MockUser_UserAllListServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockUser_UserAllListServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockUser_UserAllListServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockUser_UserAllListServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockUser_UserAllListServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockUser_UserAllListServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockUser_UserAllListServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockUser_UserAllListServer) Send(arg0 *api.UserAllListResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockUser_UserAllListServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockUser_UserAllListServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockUser_UserAllListServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockUser_UserAllListServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockUser_UserAllListServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockUser_UserAllListServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockUser_UserAllListServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockUser_UserAllListServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockUser_UserAllListServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockUser_UserAllListServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockUser_UserAllListServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockUser_UserAllListServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockUser_UserAllListServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockUser_UserAllListServer)(nil).SetTrailer), arg0)
}
